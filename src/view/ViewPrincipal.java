/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import model.ModelAnimal;
import DAO.DAOAnimal;
import model.ModelJogador;
import controller.ControllerAnimal;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author igork
 */
public class ViewPrincipal extends javax.swing.JFrame {
    ArrayList<ModelAnimal> listaModelAnimal = new ArrayList<>();
    ControllerAnimal controllerAnimal = new ControllerAnimal();
    ModelAnimal modelAnimal = new ModelAnimal();
    private ArrayList<ModelJogador> jogadores = new ArrayList();
    
    /**
     * Creates new form ViewPrincipal
     */
    public ViewPrincipal() {
        initComponents();
        setLocationRelativeTo(null);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbJogar = new javax.swing.JButton();
        jbAdicionarCartas = new javax.swing.JButton();
        jbMostrarCartas = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jbJogar.setText("Jogar");
        jbJogar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbJogarActionPerformed(evt);
            }
        });

        jbAdicionarCartas.setText("Adicionar cartas");
        jbAdicionarCartas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarCartasActionPerformed(evt);
            }
        });

        jbMostrarCartas.setText("Mostrar cartas");
        jbMostrarCartas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMostrarCartasActionPerformed(evt);
            }
        });

        jButton1.setText("Sair");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbAdicionarCartas)
                    .addComponent(jbMostrarCartas)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jbJogar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbJogar)
                .addGap(18, 18, 18)
                .addComponent(jbAdicionarCartas)
                .addGap(18, 18, 18)
                .addComponent(jbMostrarCartas)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void iniciarBatalha(){
        String ganhadorRodada;
        do{
            ganhadorRodada = "";
            int atributoRodada = Integer.parseInt(JOptionPane.showInputDialog("SELEÇÃO DE ATRIBUTO\n"+ "1 - Força \n"+ "2 - Defesa \n" + "3 - Velocidade")); 
            switch(atributoRodada){
                case 1:
                    ganhadorRodada = comparaForca();
                    break;
                case 2:
                    ganhadorRodada = comparaDefesa();
                    break;
                case 3:
                    ganhadorRodada = comparaVelocidade();
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Opção inválida!");
                    break;
            }

            if (ganhadorRodada.equals("empate")) { 
                JOptionPane.showMessageDialog(null, "Houve empate");
            }else{
                JOptionPane.showMessageDialog(null, "O ganhador da rodada foi " + ganhadorRodada);
            }
            
        }while(jogadores.get(0).getListaCartas().size() > 0 && jogadores.get(1).getListaCartas().size() > 0);
        JOptionPane.showMessageDialog(null, "O ganhador do jogo foi " + ganhadorRodada);
    }
    
    public String comparaForca(){
        ArrayList<ModelAnimal> listaCartasJogadorUm = jogadores.get(0).getListaCartas();
        ArrayList<ModelAnimal> listaCartasJogadorDois = jogadores.get(1).getListaCartas();
        
        if(listaCartasJogadorUm.get(0).getAnimalForca() > listaCartasJogadorDois.get(0).getAnimalForca()){
            removerAnimalDaLista(jogadores.get(1).getListaCartas(), 0);
            return jogadores.get(0).getNickName();
            
        }else if (listaCartasJogadorDois.get(0).getAnimalForca() > listaCartasJogadorUm.get(0).getAnimalForca()){
            removerAnimalDaLista(jogadores.get(0).getListaCartas(), 0);
            return jogadores.get(1).getNickName();
        }else{
            
            return "empate";
        }
    }
    
    public String comparaDefesa(){
        ArrayList<ModelAnimal> listaCartasJogadorUm = jogadores.get(0).getListaCartas();
        ArrayList<ModelAnimal> listaCartasJogadorDois = jogadores.get(1).getListaCartas();
        
        if(listaCartasJogadorUm.get(0).getAnimalDefesa() > listaCartasJogadorDois.get(0).getAnimalDefesa()){
            removerAnimalDaLista(jogadores.get(1).getListaCartas(), 0);
            return jogadores.get(0).getNickName();
            
        }else if (listaCartasJogadorDois.get(0).getAnimalDefesa() > listaCartasJogadorUm.get(0).getAnimalDefesa()){
            removerAnimalDaLista(jogadores.get(0).getListaCartas(), 0);
            return jogadores.get(1).getNickName();
        }else{
            
            return "empate";
        }
    }
    
    public String comparaVelocidade(){
        ArrayList<ModelAnimal> listaCartasJogadorUm = jogadores.get(0).getListaCartas();
        ArrayList<ModelAnimal> listaCartasJogadorDois = jogadores.get(1).getListaCartas();
        
        if(listaCartasJogadorUm.get(0).getAnimalVelocidade()> listaCartasJogadorDois.get(0).getAnimalVelocidade()){
            removerAnimalDaLista(jogadores.get(1).getListaCartas(), 0);
            return jogadores.get(0).getNickName();
            
        }else if (listaCartasJogadorDois.get(0).getAnimalVelocidade()> listaCartasJogadorUm.get(0).getAnimalVelocidade()){
            removerAnimalDaLista(jogadores.get(0).getListaCartas(), 0);
            return jogadores.get(1).getNickName();
        }else{
            
            return "empate";
        }
    }
    
    public void iniciarJogo() {
        listaModelAnimal = controllerAnimal.getListaAnimalController();
        if (listaModelAnimal.size()==0) {
            JOptionPane.showMessageDialog(null, "Você ainda não fez o cadastro de cartas");
        } else {
        iniciarJogador(JOptionPane.showInputDialog("Informe um nick name " + "para o Jogador 1")); 
        selecaoDeCartas( jogadores.get(0) );
        iniciarJogador(JOptionPane.showInputDialog("Informe um nick name " + "para o Jogador 2")); 
        selecaoDeCartas( jogadores.get(1) );
        iniciarBatalha();
        jogadores.removeAll(jogadores);
        }
        
    }
    
     public void removerAnimalDaLista(ArrayList lista, int posicao) {
        lista.remove(posicao);
    }
    
    public void selecaoDeCartas(ModelJogador jogador) {

        ArrayList<ModelAnimal> baralhoAux = new ArrayList();
        
        for (int i = 0; i < listaModelAnimal.size(); i++) {
            baralhoAux.add(listaModelAnimal.get(i));
        }
        
        for(int i = 0; i < listaModelAnimal.size()/2; i++){
            String lista = "";
        
            for (int j = 0; j < baralhoAux.size(); j++) {
                lista += j + " - " + baralhoAux.get(j).getAnimalNome()+ "\n";
            }


            int posicaoDaCarta = Integer.parseInt(
                JOptionPane.showInputDialog(
                    "SELEÇÃO DE CARTAS DO JOGADOR: " + jogador.getNickName() + "\n" + lista)
            );

            jogador.addAnimal( baralhoAux.get(posicaoDaCarta));
            baralhoAux.remove(posicaoDaCarta);
        }
        
    }
    
    public void iniciarJogador(String nome) {
       jogadores.add(new ModelJogador(nome));
   }
    
    private void jbJogarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbJogarActionPerformed
        // TODO add your handling code here:
        listaModelAnimal = controllerAnimal.getListaAnimalController();
        if (listaModelAnimal.size()==0) {
            JOptionPane.showMessageDialog(null, "Você ainda não fez o cadastro de cartas");
        } else {
        iniciarJogador(JOptionPane.showInputDialog("Informe um nick name " + "para o Jogador 1")); 
        selecaoDeCartas( jogadores.get(0) );
        iniciarJogador(JOptionPane.showInputDialog("Informe um nick name " + "para o Jogador 2")); 
        selecaoDeCartas( jogadores.get(1) );
        iniciarBatalha();
        jogadores.removeAll(jogadores);   
        }
        
    }//GEN-LAST:event_jbJogarActionPerformed

    
    
    private void jbAdicionarCartasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarCartasActionPerformed
        // TODO add your handling code here:
        new view.ViewRegistrarCartas().setVisible(true);
    }//GEN-LAST:event_jbAdicionarCartasActionPerformed

    private void jbMostrarCartasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMostrarCartasActionPerformed
        // TODO add your handling code here:
        new view.ViewMostrarCartas().setVisible(true);
    }//GEN-LAST:event_jbMostrarCartasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jbAdicionarCartas;
    private javax.swing.JButton jbJogar;
    private javax.swing.JButton jbMostrarCartas;
    // End of variables declaration//GEN-END:variables
}
